<?php

/**
 * ProcessWire Social Login Process, displays Social Logins in Setup > Social Logins > 
 * 
 *
 * ProcessWire 2.2 
 * Copyright (C) 2012 by Oliver Wehn
 * Licensed under GNU/GPL v2
 * 
 * http://www.processwire.com
 * http://www.oliverwehn.com
 *
 */

class ProcessSocialLoginManager extends ProcessPageType {

    static public function getModuleInfo() {
        return array(
            'title' => 'Social Login Manager',
            'version' => 100,
            'summary' => 'Manage social login modules',
			'author' => 'Oliver Wehn',
			'singular' => true,			
            );
    }


	/**
	 * Populate the fields shown in the default language list output
	 *
	 */
	public function __construct() {
		parent::__construct();
		$this->pages = $this->fuel('pages');
		$this->set('showFields', array('title', 'users'));
	}
	
	/**
	 * Init it 
	 *
	 */
	public function init() {

	}
	
	/**
	 * Render config form
	 */
	public function ___executeEdit() {
		if((is_numeric($this->input->get->id)) && ($module_page = $this->pages->get($this->input->get->id))) {
			$module = $this->modules->get($module_page->process);
			$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->page->title));
			$this->page->title .= ": ".$module_page->title; 
			$form = $this->modules->get('InputfieldForm');
			$form->action = "../save/?id=".$this->input->get->id;
			$form->attr('method', 'post');
			// offer user roles to choose
			$roles = $this->fields->get('roles');
			$field = $roles->getInputfield($this->page, $roles);
			$field->label = $this->_("User roles");
			$field->description = $this->_("Roles given to users created for this type of login by default");
			$field->value = $module->getUserRoles();
			$field->name = 'config_user_roles';
			$form->add($field);
			// let login module add specific input fields to form
			if($fields = $module->getConfigFields()) {
				foreach($fields as $field) {
					if($field instanceof Inputfield) {
						$form->add($field);
					}
				}
			}
			// add submit button
			$field = $this->modules->get('InputfieldButton');
			$field->type = "submit";
			$field->name = "confirm";
			$field->value = $this->_("Save");
			$form->add($field);
			return $form->render();
		} else {
			$this->message($this->_("No login module to edit."));
			$this->session->redirect("../");
		}
	}

	/**
	 * Save config data
	 */
	public function ___executeSave() {
		if($this->input->get->id) {
			$config = array();
			if(!is_array($this->input->post->config_user_roles)) {
				$config['user_roles'] = array();
			}
			$match = array();
			foreach($this->input->post as $name => $value) {
				if(preg_match("#^config_([a-z0-9_\[\]]+)$#", $name, $match)) {
					$config[$match[1]] = $value;
				}
			}
			$this->modules->saveModuleConfigData($this->pages->get($this->input->get->id)->process, $config);
			$this->message($this->_("Config data successfully saved"));
			$this->session->redirect("../");
		} else {
			$this->message($this->_("No config data was saved."));
			$this->session->redirect("../");
		}
	}	

	/**
	 * Render list of social login modules
	 * 
	 */
	protected function renderList() {
		$out = '';
		$table = $this->modules->get("MarkupAdminDataTable"); 
		$table->setEncodeEntities(false); 
		$fieldNames = $this->showFields; 
		$fieldLabels = $fieldNames; 
		foreach($fieldLabels as $key => $name) {
			if($name == 'name') {
				$fieldLabels[$key] = $this->_('Name'); // Label for 'name' field
				continue; 
			}
			if($name == 'users') {
				$fieldLabels[$key] = $this->_('Users'); // Label for 'users' field
				continue;
			}
			$field = wire('fields')->get($name);
			$languageID = wire('user')->language ? wire('user')->language->id : '';
			$label = $field->get('label' . $languageID);
			if(!$label) $label = $field->label; 
			if(!$label) $label = $name; 
			$fieldLabels[$key] = htmlentities($label, ENT_QUOTES, "UTF-8");
		}

		$table->headerRow($fieldLabels); 
		$selector = "limit=25, status<" . Page::statusMax; 
		$pages = $this->page->children($selector); 

		foreach($pages as $page) {
			if(!$page->editable()) continue; 
			$n = 0; 
			$row = array();
			foreach($fieldNames as $name) {
				if($name == "users") {
					$row[] = count($page->children);
				} else {
					if(!$n) $row[(string)$page->get($name)] = "edit/?id={$page->id}";
						else $row[] = $this->renderListFieldValue($name, $page->get($name)); 
				}
				$n++;
			}
			$table->row($row); 
		}

		if($pages->getTotal() > count($pages)) {
			$pager = $this->modules->get("MarkupPagerNav"); 
			$out .= $pager->render($pages);
		}

		$out .= $table->render();

		return $out; 
	}

	/**
 	 * Modify the output per-field in the PageType list (template-method)
	 *
	 * In this case we make it return a count for the language_files
	 *
	 */
	protected function renderListFieldValue($name, $value) {
		if($name == 'users') {
			return count($this->page->get()->children); 
		} else if($name == 'title') { 
			if(!$value) return '(blank)';
			return (string) $value;
		} else {
			return parent::renderListFieldValue($name, $value); 
		}
	}
	
	public function ___install() {
		
		parent::___install();
		$configData = array();
		
		/**
		 * Create login template
		 */
		// create sociallogin_process field
		$field = $this->modules->get('FieldtypeModule');
		$field->name = 'sociallogin_process';
		$field->label = 'Login Process';
		$field->description = 'Stores the login process';
		$field->flags = 0;
		$field->save();
		
		// create the fieldgroup to be used by the language template
		$fieldgroup = new Fieldgroup(); 
		$fieldgroup->name = 'sociallogin';
		$fieldgroup->add($this->fields->get('title')); 
		$fieldgroup->add($field); // sociallogin_process
		$fieldgroup->save();		
		
		// create template
		$template = new Template();	
		$template->name = 'sociallogin';
		$template->fieldgroup = $fieldgroup;  
		$template->slashUrls = 1; 
		$template->pageLabelField = 'name';
		$template->nameContentTab = 1; 
		$template->flags = Template::flagSystem; 
		$template->save();
		$this->message("Created Template: sociallogin");
		
		// create page
		$login = new Page($template);
		$login->parent = $this->fuel('pages')->get("/");
		$login->name = "login";
		$login->title = "Social Login";
		$login->process = $this->modules->get('ProcessSocialLogin'); // INSTALL ProcessSocialLogin
		$this->message("Installed ProcessSocialLogin"); 
		$login->save();
		$this->message("Created Page: ".$login->path);

		/**
		 * Create manager page in backend
		 */
		$adminPage = $this->fuel('pages')->get($this->config->adminRootPageID); 
		$setupPage = $adminPage->child("name=setup"); 
		if(!$setupPage->id) throw new WireException("Unable to locate {$adminPage->path}setup/"); 

		// create the languages parent page
		$manager = new Page();
		$manager->parent = $setupPage; 
		$manager->template = $this->templates->get('admin'); 
		$manager->process = $this->modules->get('ProcessSocialLoginManager'); 
		$manager->name = 'sociallogin';
		$manager->title = 'Social Login Providers';
		$manager->status = Page::statusSystem; 
		$manager->sort = $setupPage->numChildren; 
		$manager->save();

		$configData['socialloginPageID'] = $manager->id; 

		$this->message("Social Login Installed! Click to the 'Setup' menu to manage Social Login Providers.");
		if($default = $this->modules->get('ProcessSocialLoginProviderDefault')) {
			$default->___install();
		} 

	}
	
	public function ___uninstall() {
		/**
		 * Remove manager page in backend
		 */
		$adminPage = $this->fuel('pages')->get($this->config->adminRootPageID); 
		$setupPage = $adminPage->child("name=setup")->child('name=sociallogin'); 
		if(!$setupPage->id) throw new WireException("Unable to locate {$adminPage->path}setup/sociallogin/");
		$this->pages->delete($setupPage, true); 				
		
		$this->modules->uninstall($this->modules->get('ProcessSocialLogin'));		
		$this->pages->delete($this->pages->get('template=sociallogin'));
		$template = $this->templates->get('social_login');
		$template->flags = Template::flagSystemOverride;
		$template->save();
		$this->templates->delete($template);
		
		return parent::___uninstall();
	}

}
?>