<?php

/**
 * ProcessWire Login Process
 *
 * Provides Login capability for ProcessWire Admin 
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessSocialLogin extends Process {

	public static function getModuleInfo() {
		return array(
			'title' => 'Social Login',          
			'summary' => 'Sign in to ProcessWire with Social Media', 
			'version' => 100,
			'permission' => 'page-view',
			'requires' => 'ProcessSocialLoginManager',
			'singular' => true,
			);
	}

	/**
	 * Build the login form 
	 *
	 */
	public function init() {

		$this->id = isset($_GET['id']) ? (int) $_GET['id'] : ''; 
		$this->allowForgot = $this->modules->isInstalled('ProcessForgotPassword'); 

		return parent::init();
	}

	/**
	 * Check if login posted and attempt login, otherwise render the login form
	 *
	 */
	public function ___execute() {
		$content = "";
		$segment = $this->input->urlSegment(1);
		if($segment || $this->input->post->login_submit) {
			$method = '___execute'.(strlen($segment)?strtoupper($segment[0]).strtolower(substr($segment, 1, strlen($segment)-1)):"Default");
			try {
				$ok = $this->$method();
			}  catch(Wire404Exception $e) {
				$this->error($e->getMessage()); 
			}
			if($ok) {
				// Success page
				
			} else {
				// Error page
			}
		} else {
			/**
			 * Already logged in
			 */
			/**
			if($this->user->isLoggedin()) {
				$this->message($this->_("You are logged in.")); 
				if($this->user->hasPermission('page-edit')) $this->afterLoginRedirect();
				$url = $this->config->urls->root;
				return "<p><a href='$url'>" . $this->_('Continue') . "</a></p>";
			}
			 */
			
			/**
			 * Forgot password process 
			 */
			/**
			if($this->input->get->forgot && $this->allowForgot) {
				$process = $this->modules->get("ProcessForgotPassword"); 
				return $process->execute();
			}
			 */
			
			/**
			 * Build login form
			 */
			//if($this->input->post->
			$form = $this->buildLoginForm();
			return $form->render();
		}
	}	

	protected function ___buildLoginForm() {

		if($login = $this->pages->get('template=sociallogin')) {
			// we'll retain an ID field in the GET url, if it was there
			$form = $this->modules->get('InputfieldForm');		
			$form->attr('action', $login->url . ($this->id ? "?id={$this->id}" : '')); 
			$form->attr('id', $this->className() . 'Form'); 
			
			// store address from where the login is performed
			$field = $this->modules->get('InputfieldHidden');
			$field->attr('id+name', 'login_returnto');
			$field->attr('value', $_SERVER['REQUEST_URI']);
			$form->add($field);
		
			$field = $this->modules->get('InputfieldText');
			$field->set('label', $this->_('Username')); // Login form: username field label
			$field->attr('id+name', 'login_name'); 
			$field->attr('class', $this->className() . 'Name');
			$form->add($field); 
		
			$field = $this->modules->get('InputfieldText');
			$field->set('label', $this->_('Password')); // Login form: password field label
			$field->attr('id+name', 'login_pass'); 
			$field->attr('type', 'password'); 
			$field->attr('class', $this->className() . 'Pass'); 
			$form->add($field);
		
			$field = $this->modules->get('InputfieldSubmit');
			$field->attr('name', 'login_submit'); 
			$field->attr('value', $this->_('Login')); // Login form: submit login button
			$form->add($field);
			
			// add social login options
			$modules = $this->modules->find('className^=ProcessSocialLoginProvider');
			foreach($modules as $module) {
				// pass $form by reference
				$module->extendLoginForm(&$form);
			}
			
			return $form; 
		} else {
			throw new WireException("Login page wasnï¿½t found");
		}

	}

	/**
	 * Render the login form
	 *
	 */
	protected function renderLoginForm() {
		if(isset($_GET['login'])) {
			$this->afterLoginRedirect();
		} else {
			// note the space after 'Login ' is intentional to separate it from the Login button for translation purposes
			$this->setFuel('processHeadline', $this->_('Login ')); // Headline for login form page
			$out = $this->form->render();
			$links = '';
			if($this->allowForgot) {
				$links .= "<div><span class='ui-icon ui-icon-locked'></span><a href='./?forgot=1'>" . $this->_("Forgot your password?") . "</a></div>"; // Forgot password link text
			}
			$home = $this->pages->get("/"); 
			$links .= "<div><span class='ui-icon ui-icon-home'></span><a href='{$home->url}'>{$home->title}</a></div>";
			if($links) $out .= "<p>$links</p>";
			return $out; 
		}
	}

	/**
	 * Log the user out
	 *
	 */
	public function ___executeLogout() {
		if($this->user->hasPermission('page-edit')) {
			$url = $this->config->urls->admin;
			$this->message($this->_("You have logged out")); 
		} else {
			$url = $this->config->urls->root;
		} 
		$this->session->logout();
		$this->session->redirect($url);
	}

	/**
	 * Redirect to admin root after login
	 *
	 * Called only if the login request originated on the actual login page. 
	 *
	 */
	protected function ___afterLoginRedirect() {
		$this->session->redirect($this->pages->get($this->config->adminRootPageID)->url);
	}
	
	public function ___install() {
		return parent::___install();		
	}
}

