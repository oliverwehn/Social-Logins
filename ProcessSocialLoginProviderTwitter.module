<?php

/**
 * ProcessWire Social Login Provider Process
 *
 * Provides capability for users to sign in with Twitter 
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.2  
 * Copyright (C) 2012 by Oliver Wehn 
 * Licensed under GNU/GPL v2
 * 
 * http://www.processwire.com
 * http://www.oliverwehn.com
 *
 */
require_once(dirname(__FILE__) . '/AbstractSocialLoginProvider.php');

class ProcessSocialLoginProviderTwitter extends AbstractSocialLoginProviderAPI {
	protected $providerName = "Twitter";
    protected $twitter_host = 'https://api.twitter.com/1/';
    protected $urls = array(
        'accessToken' => 'https://api.twitter.com/oauth/access_token',
        'authenticate' => 'https://api.twitter.com/oauth/access_token',
        'authorize' => 'https://api.twitter.com/oauth/authorize',
        'requestToken' => 'https://api.twitter.com/oauth/request_token'
        );
    var $token = array();

	public static function getModuleInfo() {
		return array(
			'title' => 'Social Login Provider: Twitter',          
			'summary' => 'Let users sign in with Twitter', 
			'version' => 001, 
			'permission' => 'page-view',
			'singular' => true,			
			'requires' => array('ProcessSocialLoginManager', 'ProcessSocialLogin')
			);
	}

	/**
	 * Init module 
	 *
	 */
	public function init() {
		$method = 'execute'.strtoupper($this->providerName[0]).strtolower(substr($this->providerName, 1, strlen($this->providerName)-1));
		$this->addHook('ProcessSocialLogin::___execute'.$this->providerName, $this, '___executeLogin');
		return parent::init();
	}

	/**
	 * Check if login posted and attempt login, otherwise render the login form
	 *
	 */
	public function ___execute() {
        echo "jein";
	}
	
	/**
	 * Perform login
	 */
	public function ___executeLogin() {
		if(!empty($this->consumer_key) && !empty($this->consumer_secret)) {
		    if(!isset($this->token['oauth_token']) || !isset($this->token['oauth_token_secret'])) {
		        $request_token = $this->_twitterRequestToken('http://'.$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI']);
		        echo "(".$request_token.")";
                if($this->http_info['code'] == 200) {
                    $this->token['oauth_token'] = $request_token['oauth_token'];
                    $this->token['oauth_token'] = $request_token['oauth_token_secret'];
                    $_SESSION['token'] = $this->token;
                    //print_r($this->token);
                    header('Location: '.$this->urls['authenticate'].'?oauth_token='.$request_token['oauth_token']);
                } else {
                    echo "geht nicht";
                }
	        } else {
                echo "nš";
	        }
		} else {
		    throw new WireException('SocialLoginProviderTwitter: Module wasnÕt properly configured.');
		}
	}
	
	/**
	 * Extend login form
	 */
	public function extendLoginForm(&$form) {
		if($form instanceof InputfieldWrapper) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Provide roles for users created within this login process
	 */	
	public function getUserRoles() {
		$roles = new PageArray();
		if(is_array($this->user_roles)) {
			foreach($this->user_roles as $user_role) {
				$roles->add($this->roles->get($user_role));
			}
		} else {
			$user_role = null;
			if(($user_role = $this->roles->get($this->user_roles)) && ($user_role->id)) {
				$roles->add($user_role);
			}
		}
		return $roles;
	}

	/**
	 * Provide login module specific config fields
	 */
	public function getConfigFields() {
		$fields = new InputfieldWrapper();
		// consumer key
		$field = $this->modules->get('InputfieldText');
		$field->name = 'config_consumer_key';
		$field->label = $this->_('Twitter Consumer Key');
		$field->description = $this->_('Enter the consumer key you got for your site from dev.twitter.com');
		$field->value = $this->consumer_key;
		$fields->add($field);
		// consumer secret
		$field = $this->modules->get('InputfieldText');
		$field->name = 'config_consumer_secret';
		$field->label = $this->_('Twitter Consumer Secret');
		$field->description = $this->_('Enter the consumer secret you got for your site from dev.twitter.com');
		$field->value = $this->consumer_secret;
		$fields->add($field);
		return $fields;
	}	
	
	public static function getModuleConfigInputfields(array $data) {
		return new InputfieldWrapper();
	}
    
    /**
     *  Provider related methods
     */
    private function _twitterGetSignature($base_string) {
        $parts = array(
            $this->consumer_secret,
            (isset($this->token['oauth_token_secret'])) ? $this->token['oauth_token_secret'] : ""
        );
        
        $parts = $this->urlEncode($parts);
        $secret = implode('&', $parts);
        return base64_encode(hash_hmac('sha1', $base_string, $secret, true));
         
        //$signature = $this->urlEncode(base64_encode(hash_hmac('sha1', $base_string, $this->urlEncode($this->consumer_secret).'&', TRUE)));
        //return $signature;
    }
    private function _twitterGetBaseString($url, $method, $query) {
        //$base_string = $this->urlEncode(implode('&', array(strtoupper($method), $this->normalizeUrl($url), $this->buildQueryString($data))));
        //$base_string = strtoupper($method).'&'.$this->normalizeUrl($url).'&'.$this->buildQueryString($data);
        if (isset($query['oauth_signature'])) {
            unset($query['oauth_signature']);
        }

        $parts = array(
            strtoupper($method),
            $this->normalizeUrl($url),
            count($query)?$this->buildQueryString($query):null
        );
        $parts = $this->urlEncode($parts);
        $base_string = implode("&", $parts);
        return $base_string;
    }
    
    private function _twitterGetOAuthHeader($url, $method, $query=array(), $callback_url="oob") {
        $header = "Authorization: OAuth ";
        $header_parts = array( 
            'oauth_consumer_key' => $this->consumer_key,
            'oauth_nonce' => md5(microtime() . mt_rand()),
            'oauth_signature_method' => "HMAC-SHA1",                
            'oauth_signature' => "",
            'oauth_timestamp' => time(),
            'oauth_version' => "1.0",
            'oauth_callback' => $callback_url
            );
        if(isset($this->token['oauth_token'])) {
            $header_parts['oauth_token'] = $this->token['oauth_token'];
        } else {
            //$header_parts['oauth_token'] = '';
        }
        $base_string = $this->_twitterGetBaseString($url, $method, $query); //  count($query)?array_merge($header_parts, $query):$header_parts);
        echo $base_string;
        $header_parts['oauth_signature'] = $this->_twitterGetSignature($base_string);
        foreach($header_parts as $param => $value) { 
            $header .= $param."=\"".$this->urlEncode($value)."\", ";
        }
        $header = substr($header, 0, strlen($header)-2);
        return stripslashes($header);        
    }
    
    private function _twitterRequestToken($callback_url) {
        $query = array();
        $response = $this->_twitterOAuthRequest($this->urls['requestToken'], 'GET', $query, $callback_url);
        echo "<pre>";
        print_r($this->http_info);
        echo "<br />";
        $token = $this->parseParameters($response);
        $this->token = array('oauth_token' => $token['oauth_token'], 'oauth_token_secret' => $token['oauth_token_secret']);
        return $token;
    }
    
    private function _twitterFormatRequest($url) {
        if (strrpos($url, "https://") !== 0 && strrpos($url, "http://") !== 0) {
            $url = "{$this->twitter_host}{$url}.json";
        }        
        return $url;    
    } 
    
    private function _twitterOAuthRequest($url, $method, $query, $callback_url="oob") {
        $url = $this->_twitterFormatRequest($url);
        //$oauth_header = $this->_twitterGetOAuthHeader($url, $method, $query, $callback_url);
        
        $query = array_merge(
            array("oauth_version" => "1.0",
                          "oauth_nonce" => md5(microtime() . mt_rand()),
                          "oauth_timestamp" => time(),
                          "oauth_consumer_key" => $this->consumer_key,
                          "oauth_signature_method" => "HMAC-SHA1"
                          ),
            $query
        );
         
        if (isset($this->token['oauth_token'])) {
            $query['oauth_token'] = $this->token['oauth_token'];
        }
        $base_string = $this->_twitterGetBaseString($url, $method, $query);
        $query["oauth_signature"] = $this->_twitterGetSignature($base_string);
        echo $query["oauth_signature"]."<br />";
        echo "<pre>";
        echo $base_string."<br />\n";
        // set additional curl options
        $options = array(
            CURLOPT_USERAGENT => $this->className()
        );
        
        switch($method) {
            case 'POST': {
                $options = array(
                    CURLOPT_POST => true,
                    CURLOPT_POSTFIELDS => count($query)?$this->buildQueryString($query):''
                    );
                break;
            }
            case 'DELETE': {
                $options = array(
                    CURLOPT_CUSTOMREQUEST => 'DELETE'
                    );
                if (!empty($query)) {
                  $url = $url."?".$this->buildQueryString($query);
                }
                break;
            }
            case 'GET': {
                $options = array(
                    CURLOPT_POST => false
                );
                if (count($query)) {
                    $url = $url."?".$this->buildQueryString($query);
                }
                break;
            }
           
        } 
        echo $url."<br />";
        echo date('D, d M Y, H:i:s T', time())."<br />";
        $options[CURLOPT_VERBOSE] = true;
        return $this->http($url, null, $options, array());
        //return $this->http($url, null, $options, array($oauth_header));
        //return $this->http_req($url, null);
    }
         
    
	
	public function ___install() {
		parent::___install();
		/**
		 * Create manager page in backend
		 */
		$adminPage = $this->fuel('pages')->get($this->config->adminRootPageID); 
		$socialloginPage = $adminPage->child("name=setup")->child("name=sociallogin"); 
		if(!$socialloginPage->id) throw new WireException("Unable to locate {$adminPage->path}setup/sociallogin"); 
		
		$provider = new Page($this->templates->get('admin'));
		$provider->parent = $socialloginPage;
		$provider->process = $this->modules->get('ProcessSocialLogin'.$this->providerName);
		$provider->title = $this->providerName;
		$provider->name = strtolower($this->providerName);
		$provider->save();
	}

	public function ___uninstall() {
		$adminPage = $this->fuel('pages')->get($this->config->adminRootPageID); 
		$socialloginPage = $adminPage->child("name=setup")->child("name=sociallogin"); 
		if(!$socialloginPage->id) throw new WireException("Unable to locate {$adminPage->path}setup/sociallogin"); 
		$provider = $socialloginPage->child('name='.strtolower($this->providerName));
		$this->pages->delete($provider);
		parent::___uninstall();
	}
}

