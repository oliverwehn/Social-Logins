<?php

/**
 * ProcessWire Social Login Provider Process
 *
 * Provides capability for users to sign in with Twitter 
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.2  
 * Copyright (C) 2012 by Oliver Wehn 
 * Licensed under GNU/GPL v2
 * 
 * http://www.processwire.com
 * http://www.oliverwehn.com
 *
 */
require_once(dirname(__FILE__) . '/AbstractSocialLoginProvider.php');

class ProcessSocialLoginProviderTwitter extends AbstractSocialLoginProvider {

	protected $providerName = "Twitter";

	public static function getModuleInfo() {
		return array(
			'title' => 'Social Login Provider: Twitter',          
			'summary' => 'Let users sign in with Twitter', 
			'version' => 001, 
			'permission' => 'page-view',
			'singular' => true,			
			'requires' => array('ProcessSocialLoginManager', 'ProcessSocialLogin')
			);
	}

	/**
	 * Init module 
	 *
	 */
	public function init() {
		$method = 'execute'.strtoupper($this->providerName[0]).strtolower(substr($this->providerName, 1, strlen($this->providerName)-1));
		$this->addHook('ProcessSocialLogin::___execute'.$this->providerName, $this, '___executeLogin');
		return parent::init();
	}

	/**
	 * Check if login posted and attempt login, otherwise render the login form
	 *
	 */
	public function ___execute() {

	}
	
	/**
	 * Perform login
	 */
	public function ___executeLogin() {
		echo "Yeah!";
	}
	
	/**
	 * Extend login form
	 */
	public function extendLoginForm(&$form) {
		if($form instanceof InputfieldWrapper) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Provide roles for users created within this login process
	 */	
	public function getUserRoles() {
		$roles = new PageArray();
		if(is_array($this->user_roles)) {
			foreach($this->user_roles as $user_role) {
				$roles->add($this->roles->get($user_role));
			}
		} else {
			$user_role = null;
			if(($user_role = $this->roles->get($this->user_roles)) && ($user_role->id)) {
				$roles->add($user_role);
			}
		}
		return $roles;
	}

	/**
	 * Provide login module specific config fields
	 */
	public function getConfigFields() {
		$fields = new InputfieldWrapper();
		// consumer key
		$field = $this->modules->get('InputfieldText');
		$field->name = 'config_consumer_key';
		$field->label = $this->_('Twitter Consumer Key');
		$field->description = $this->_('Enter the consumer key you got for your site from dev.twitter.com');
		$field->value = $this->consumer_key;
		$fields->add($field);
		// consumer secret
		$field = $this->modules->get('InputfieldText');
		$field->name = 'config_consumer_secret';
		$field->label = $this->_('Twitter Consumer Secret');
		$field->description = $this->_('Enter the consumer secret you got for your site from dev.twitter.com');
		$field->value = $this->consumer_secret;
		$fields->add($field);
		return $fields;
	}	
	
	public static function getModuleConfigInputfields(array $data) {
		return new InputfieldWrapper();
	}
	
	public function ___install() {
		parent::___install();
		/**
		 * Create manager page in backend
		 */
		$adminPage = $this->fuel('pages')->get($this->config->adminRootPageID); 
		$socialloginPage = $adminPage->child("name=setup")->child("name=sociallogin"); 
		if(!$socialloginPage->id) throw new WireException("Unable to locate {$adminPage->path}setup/sociallogin"); 
		
		$provider = new Page($this->templates->get('admin'));
		$provider->parent = $socialloginPage;
		$provider->process = $this->modules->get('ProcessSocialLogin'.$this->providerName);
		$provider->title = $this->providerName;
		$provider->name = strtolower($this->providerName);
		$provider->save();
	}

	public function ___uninstall() {
		$adminPage = $this->fuel('pages')->get($this->config->adminRootPageID); 
		$socialloginPage = $adminPage->child("name=setup")->child("name=sociallogin"); 
		if(!$socialloginPage->id) throw new WireException("Unable to locate {$adminPage->path}setup/sociallogin"); 
		$provider = $socialloginPage->child('name='.strtolower($this->providerName));
		$this->pages->delete($provider);
		parent::___uninstall();
	}
}

